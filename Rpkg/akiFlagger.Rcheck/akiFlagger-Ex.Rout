
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "akiFlagger"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "akiFlagger-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('akiFlagger')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("returnAKIpatients")
> ### * returnAKIpatients
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: returnAKIpatients
> ### Title: Main logic for calculating and returning patients with AKI
> ### Aliases: returnAKIpatients
> 
> ### ** Examples
> 
> returnAKIpatients(toy)
NULL
      patient_id inpatient                time creatinine aki
   1:      12732     FALSE 2019-11-16 05:42:42       1.05   0
   2:      12732     FALSE 2019-11-20 05:42:42       1.61   0
   3:      12732     FALSE 2020-01-15 05:42:42       1.42   0
   4:      12732     FALSE 2020-02-27 11:42:42       1.26   0
   5:      12732      TRUE 2020-03-01 17:42:42       1.06   0
  ---                                                        
1074:      14305     FALSE 2019-12-18 07:35:50       0.97   0
1075:      14305     FALSE 2020-01-19 13:35:50       0.90   0
1076:      14305     FALSE 2020-01-30 01:35:50       0.78   0
1077:      14305     FALSE 2020-03-22 01:35:50       1.01   0
1078:      14305     FALSE 2020-04-10 07:35:50       1.33   0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("returnAKIpatients", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("returnBaselineCreat")
> ### * returnBaselineCreat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: returnBaselineCreat
> ### Title: Return the baseline creatinine, helper function
> ### Aliases: returnBaselineCreat
> 
> ### ** Examples
> 
> returnBaselineCreat(toy, eGFR_impute = TRUE)
Error in `dplyr::mutate()`:
! Problem while computing `creat_over_kappa = 75/(141 * (1 + 0.018 *
  sex) * 0.993^age)`.
Caused by error:
! object 'sex' not found
Backtrace:
     ▆
  1. ├─akiFlagger::returnBaselineCreat(toy, eGFR_impute = TRUE)
  2. │ └─dataframe %>% ...
  3. ├─dplyr::mutate(...)
  4. ├─dplyr:::mutate.data.frame(...)
  5. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())
  6. │   ├─base::withCallingHandlers(...)
  7. │   └─mask$eval_all_mutate(quo)
  8. └─base::.handleSimpleError(`<fn>`, "object 'sex' not found", base::quote(mask$eval_all_mutate(quo)))
  9.   └─dplyr h(simpleError(msg, call))
 10.     └─rlang::abort(...)
Execution halted
